# DO NOT EDIT THIS FILE (unless you really know how it works)
#
# Please edit /boot/orangepiEnv.txt to set supported parameters
#

setenv load_addr "0x9000000"
setenv overlay_error "false"
# default values
setenv rootdev "/dev/mmcblk0p1"
setenv verbosity "1"
setenv console "both"
setenv bootlogo "false"
setenv rootfstype "ext4"
setenv docker_optimizations "on"
setenv earlycon "off"
setenv remote_env_file ""
setenv fdt_dir "dtb"
setenv kernel_load_cmd_default "load ${devtype} ${devnum} ${kernel_addr_r} ${prefix}Image"
setenv kernel_load_cmd "${kernel_load_cmd_default}"

echo "Boot script loaded from ${devtype} ${devnum}"

#
# User-defined environment variables:
#	remote_env_file: Environment variables file on TFTP server. For example: remote_env_file=orange-pi-5/orangepiEnv.txt
#	fdt_dir: For example: fdt_dir=dtbs/6.1.43
#	kernel_load_cmd: Another example: kernel_load_cmd=tftp ${kernel_addr_r} orange-pi-5/Image
#
# Mandatory built-in environment variables for using TFTP command(s):
#	ethdev: For example: ethdev=eth0
#	ipaddr
#	netmask
#	serverip
#	gatewayip
#
if test -e ${devtype} ${devnum} ${prefix}orangepiEnv.txt; then
	load ${devtype} ${devnum} ${load_addr} ${prefix}orangepiEnv.txt
	env import -t ${load_addr} ${filesize}
fi

if test "${remote_env_file}" != ""; then
	echo "Fetching an environment variables file via TFTP ..."
	if tftp ${load_addr} ${remote_env_file}; then
		echo "Applying environment variable additions and/or overrides ..."
		env import -t ${load_addr} ${filesize}
	else
		printenv && echo "" && help
	fi
fi

if test ! -e ${devtype} ${devnum} ${prefix}${fdt_dir}; then
	echo "*** Directory does not exist: ${prefix}${fdt_dir}"
	test "${fdt_dir}" = "dtb" || setenv fdt_dir "dtb"
fi

if test "${fdt_dir}" = "dtb"; then
	echo "Device tree directory is fixed to: ${prefix}${fdt_dir}"
else
	echo "Device tree directory is set depending on kernel release: ${prefix}${fdt_dir}"
fi

if test "${logo}" = "disabled"; then setenv logo "logo.nologo"; fi

if test "${console}" = "display" || test "${console}" = "both"; then setenv consoleargs "console=tty1"; fi
if test "${console}" = "serial" || test "${console}" = "both"; then setenv consoleargs "console=ttyS2,1500000 ${consoleargs}"; fi
if test "${earlycon}" = "on"; then setenv consoleargs "earlycon ${consoleargs}"; fi
if test "${bootlogo}" = "true"; then
        setenv consoleargs "splash plymouth.ignore-serial-consoles ${consoleargs}"
else
        setenv consoleargs "splash=verbose ${consoleargs}"
fi

# get PARTUUID of first partition on SD/eMMC the boot script was loaded from
if test "${devtype}" = "mmc"; then part uuid mmc ${devnum}:1 partuuid; fi

setenv bootargs "root=${rootdev} rootwait rootfstype=${rootfstype} ${consoleargs} consoleblank=0 loglevel=${verbosity} ubootpart=${partuuid} usb-storage.quirks=${usbstoragequirks} ${extraargs} ${extraboardargs}"

if test "${docker_optimizations}" = "on"; then setenv bootargs "${bootargs} cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory swapaccount=1"; fi

load ${devtype} ${devnum} ${ramdisk_addr_r} ${prefix}uInitrd
run kernel_load_cmd || run kernel_load_cmd_default || exit

load ${devtype} ${devnum} ${fdt_addr_r} ${prefix}${fdt_dir}/${fdtfile}
fdt addr ${fdt_addr_r}
fdt resize 65536
for overlay_file in ${overlays}; do
	if load ${devtype} ${devnum} ${load_addr} ${prefix}${fdt_dir}/rockchip/overlay/${overlay_prefix}-${overlay_file}.dtbo; then
		echo "Applying kernel provided DT overlay ${overlay_prefix}-${overlay_file}.dtbo"
		fdt apply ${load_addr} || setenv overlay_error "true"
	fi
done
for overlay_file in ${user_overlays}; do
	if load ${devtype} ${devnum} ${load_addr} ${prefix}${fdt_dir}/rockchip/overlay-user/${overlay_file}.dtbo; then
		echo "Applying user provided DT overlay ${overlay_file}.dtbo"
		fdt apply ${load_addr} || setenv overlay_error "true"
	fi
done
if test "${overlay_error}" = "true"; then
	echo "Error applying DT overlays, restoring original DT"
	load ${devtype} ${devnum} ${fdt_addr_r} ${prefix}${fdt_dir}/${fdtfile}
else
	if load ${devtype} ${devnum} ${load_addr} ${prefix}${fdt_dir}/rockchip/overlay/${overlay_prefix}-fixup.scr; then
		echo "Applying kernel provided DT fixup script (${overlay_prefix}-fixup.scr)"
		source ${load_addr}
	fi
	if test -e ${devtype} ${devnum} ${prefix}fixup.scr; then
		load ${devtype} ${devnum} ${load_addr} ${prefix}fixup.scr
		echo "Applying user provided fixup script (fixup.scr)"
		source ${load_addr}
	fi
fi

if test "${ethernet_phy}" = "rtl8211f"; then
        fdt set /ethernet@ff540000 tx_delay <0x24>
        fdt set /ethernet@ff540000 rx_delay <0x18>
fi

booti ${kernel_addr_r} ${ramdisk_addr_r} ${fdt_addr_r}

# Recompile with:
# mkimage -C none -A arm -T script -d /boot/boot.cmd /boot/boot.scr
